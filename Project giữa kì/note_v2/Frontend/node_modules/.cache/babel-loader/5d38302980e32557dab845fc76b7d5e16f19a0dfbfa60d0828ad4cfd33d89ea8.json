{"ast":null,"code":"var _jsxFileName = \"D:\\\\Document\\\\test\\\\project-note\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(/*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 8,\n  columnNumber: 13\n}, this));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nconst {\n  GoogleGenerativeAI\n} = require(\"@google/generative-ai\");\nconst http = require('http');\nconst fs = require('fs');\nconst hostname = 'localhost';\nconst port = 3001;\nconst messagesFilePath = 'messages.json'; // File to store messages\nlet messages = []; // Store messages here\n\n// Load messages from file\nfunction loadMessages() {\n  try {\n    const data = fs.readFileSync(messagesFilePath, 'utf8');\n    messages = JSON.parse(data);\n  } catch (err) {\n    // If the file doesn't exist or is invalid, start with an empty array\n    messages = [];\n  }\n}\n\n// Save messages to file\nfunction saveMessages() {\n  fs.writeFileSync(messagesFilePath, JSON.stringify(messages, null, 2));\n}\n\n// Load messages on startup\nloadMessages();\nasync function handleRequest(req, res) {\n  if (req.method === 'POST') {\n    let body = '';\n    req.on('data', chunk => {\n      body += chunk.toString();\n    });\n    req.on('end', async () => {\n      const prompt = new URLSearchParams(body).get('prompt');\n\n      // messages.push({ role: \"user\",  content: prompt }); // Save user message\n      // saveMessages();\n\n      const genAI = new GoogleGenerativeAI(process.env.API_KEY);\n      const model = genAI.getGenerativeModel({\n        // model: \"gemini-1.5-flash\" \n        model: \"tunedModels/todolistdataupdatekey2-v49pqdz54ztj\"\n      });\n      const result = await model.generateContent(prompt);\n      messages.push({\n        content: result.response.text()\n      }); // Save assistant message\n      saveMessages();\n\n      // Log the response object for debugging\n      console.log(\"Response text:\", result.response.text()); // Added line to log response text\n\n      res.writeHead(200, {\n        'Content-Type': 'application/json'\n      });\n      res.end(JSON.stringify({\n        response: result.response.text(),\n        messages\n      }));\n    });\n  } else {\n    fs.readFile('index.html', (err, data) => {\n      if (err) {\n        res.writeHead(500);\n        res.end('Internal Server Error');\n      } else {\n        res.writeHead(200, {\n          'Content-Type': 'text/html'\n        });\n        res.end(data);\n      }\n    });\n  }\n}\nconst server = http.createServer(handleRequest);\nserver.listen(port, hostname, () => {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});","map":{"version":3,"names":["React","ReactDOM","App","reportWebVitals","jsxDEV","_jsxDEV","root","createRoot","document","getElementById","render","fileName","_jsxFileName","lineNumber","columnNumber","GoogleGenerativeAI","require","http","fs","hostname","port","messagesFilePath","messages","loadMessages","data","readFileSync","JSON","parse","err","saveMessages","writeFileSync","stringify","handleRequest","req","res","method","body","on","chunk","toString","prompt","URLSearchParams","get","genAI","process","env","API_KEY","model","getGenerativeModel","result","generateContent","push","content","response","text","console","log","writeHead","end","readFile","server","createServer","listen"],"sources":["D:/Document/test/project-note/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nconst { GoogleGenerativeAI } = require(\"@google/generative-ai\");\nconst http = require('http');\nconst fs = require('fs');\n\nconst hostname = 'localhost';\nconst port = 3001;\n\nconst messagesFilePath = 'messages.json'; // File to store messages\nlet messages = []; // Store messages here\n\n// Load messages from file\nfunction loadMessages() {\n  try {\n    const data = fs.readFileSync(messagesFilePath, 'utf8');\n    messages = JSON.parse(data);\n  } catch (err) {\n    // If the file doesn't exist or is invalid, start with an empty array\n    messages = [];\n  }\n}\n\n// Save messages to file\nfunction saveMessages() {\n  fs.writeFileSync(messagesFilePath, JSON.stringify(messages, null, 2));\n}\n\n// Load messages on startup\nloadMessages();\n\nasync function handleRequest(req, res) {\n  if (req.method === 'POST') {\n    let body = '';\n    req.on('data', chunk => {\n      body += chunk.toString();\n    });\n    req.on('end', async () => {\n      const prompt = new URLSearchParams(body).get('prompt');\n\n      // messages.push({ role: \"user\",  content: prompt }); // Save user message\n      // saveMessages();\n\n      const genAI = new GoogleGenerativeAI(process.env.API_KEY);\n      const model = genAI.getGenerativeModel({ \n        // model: \"gemini-1.5-flash\" \n        model: \"tunedModels/todolistdataupdatekey2-v49pqdz54ztj\",\n        \n        \n      });\n      const result = await model.generateContent(prompt);\n\n      messages.push({ content: result.response.text() }); // Save assistant message\n      saveMessages();\n\n      // Log the response object for debugging\n      console.log(\"Response text:\", result.response.text()); // Added line to log response text\n\n      res.writeHead(200, { 'Content-Type': 'application/json' });\n      res.end(JSON.stringify({ response: result.response.text(), messages }));\n    });\n  } else {\n    fs.readFile('index.html', (err, data) => {\n      if (err) {\n        res.writeHead(500);\n        res.end('Internal Server Error');\n      } else {\n        res.writeHead(200, { 'Content-Type': 'text/html' });\n        res.end(data);\n      }\n    });\n  }\n}\n\n\n\nconst server = http.createServer(handleRequest);\n\nserver.listen(port, hostname, () => {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}