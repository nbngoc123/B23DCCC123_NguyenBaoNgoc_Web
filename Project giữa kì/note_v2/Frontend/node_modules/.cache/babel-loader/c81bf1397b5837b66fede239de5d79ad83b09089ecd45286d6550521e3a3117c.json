{"ast":null,"code":"var _jsxFileName = \"D:\\\\Document\\\\test\\\\project-note\\\\src\\\\components\\\\Note\\\\Graph\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChartComponent = ({\n  data,\n  options\n}) => {\n  _s();\n  const chartRef = useRef();\n  useEffect(() => {\n    if (chartRef.current) {\n      // If a chart already exists, destroy it before creating a new one\n      const oldChart = chartRef.current.getContext('2d').chart;\n      if (oldChart) {\n        oldChart.destroy();\n      }\n    }\n    const chartInstance = new Chart(chartRef.current, {\n      type: 'bar',\n      // or 'line', 'pie', etc.\n      data: data,\n      options: options\n    });\n\n    // Update the chart instance on the ref for cleanup\n    chartRef.current.chart = chartInstance;\n    return () => {\n      // Destroy the chart instance when the component unmounts\n      if (chartInstance) {\n        chartInstance.destroy();\n      }\n    };\n  }, [data, options]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: chartRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 10\n  }, this);\n};\n_s(ChartComponent, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c = ChartComponent;\nexport default ChartComponent;\nvar _c;\n$RefreshReg$(_c, \"ChartComponent\");","map":{"version":3,"names":["React","useEffect","useRef","Chart","jsxDEV","_jsxDEV","ChartComponent","data","options","_s","chartRef","current","oldChart","getContext","chart","destroy","chartInstance","type","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Document/test/project-note/src/components/Note/Graph/index.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport Chart from 'chart.js/auto';\r\n\r\nconst ChartComponent = ({ data, options }) => {\r\n  const chartRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (chartRef.current) {\r\n      // If a chart already exists, destroy it before creating a new one\r\n      const oldChart = chartRef.current.getContext('2d').chart;\r\n      if (oldChart) {\r\n        oldChart.destroy();\r\n      }\r\n    }\r\n\r\n    const chartInstance = new Chart(chartRef.current, {\r\n      type: 'bar', // or 'line', 'pie', etc.\r\n      data: data,\r\n      options: options,\r\n    });\r\n\r\n    // Update the chart instance on the ref for cleanup\r\n    chartRef.current.chart = chartInstance;\r\n\r\n    return () => {\r\n      // Destroy the chart instance when the component unmounts\r\n      if (chartInstance) {\r\n      chartInstance.destroy();\r\n      }\r\n    };\r\n  }, [data, options]);\r\n\r\n  return <canvas ref={chartRef} />;\r\n};\r\n\r\nexport default ChartComponent;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAOC,KAAK,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,cAAc,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAMC,QAAQ,GAAGR,MAAM,CAAC,CAAC;EAEzBD,SAAS,CAAC,MAAM;IACd,IAAIS,QAAQ,CAACC,OAAO,EAAE;MACpB;MACA,MAAMC,QAAQ,GAAGF,QAAQ,CAACC,OAAO,CAACE,UAAU,CAAC,IAAI,CAAC,CAACC,KAAK;MACxD,IAAIF,QAAQ,EAAE;QACZA,QAAQ,CAACG,OAAO,CAAC,CAAC;MACpB;IACF;IAEA,MAAMC,aAAa,GAAG,IAAIb,KAAK,CAACO,QAAQ,CAACC,OAAO,EAAE;MAChDM,IAAI,EAAE,KAAK;MAAE;MACbV,IAAI,EAAEA,IAAI;MACVC,OAAO,EAAEA;IACX,CAAC,CAAC;;IAEF;IACAE,QAAQ,CAACC,OAAO,CAACG,KAAK,GAAGE,aAAa;IAEtC,OAAO,MAAM;MACX;MACA,IAAIA,aAAa,EAAE;QACnBA,aAAa,CAACD,OAAO,CAAC,CAAC;MACvB;IACF,CAAC;EACH,CAAC,EAAE,CAACR,IAAI,EAAEC,OAAO,CAAC,CAAC;EAEnB,oBAAOH,OAAA;IAAQa,GAAG,EAAER;EAAS;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAClC,CAAC;AAACb,EAAA,CA9BIH,cAAc;AAAAiB,EAAA,GAAdjB,cAAc;AAgCpB,eAAeA,cAAc;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}