"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromTextSchema = void 0;
// Zod schema for runtime validation
const zod_1 = require("zod");
const controlNetSchema = zod_1.z
    .object({
    preprocessor: zod_1.z
        .enum(["Canny", "DepthZoe", "SoftedgePidinet", "Rembg"])
        .optional(),
    weight: zod_1.z.number().optional(),
    startStep: zod_1.z.number().optional(),
    endStep: zod_1.z.number().optional(),
    blobKey: zod_1.z.string().nullable().optional(),
    imageUrl: zod_1.z.string().nullable().optional(),
})
    .strict();
exports.fromTextSchema = zod_1.z
    .object({
    baseModel: zod_1.z.string().optional(),
    model: zod_1.z.string(),
    params: zod_1.z
        .object({
        prompt: zod_1.z.string(),
        negativePrompt: zod_1.z.string().optional(),
        scheduler: zod_1.z.string().optional(),
        steps: zod_1.z.number().optional(),
        cfgScale: zod_1.z.number().optional(),
        width: zod_1.z.number().gte(1).lte(1440),
        height: zod_1.z.number().gte(1).lte(1440),
        seed: zod_1.z.number().optional(),
        clipSkip: zod_1.z.number().optional(),
    })
        .strict(),
    additionalNetworks: zod_1.z
        .record(zod_1.z
        .object({
        strength: zod_1.z.number().optional(),
        triggerWord: zod_1.z.string().optional(),
    })
        .strict())
        .optional(),
    controlNets: zod_1.z.array(controlNetSchema).optional(),
    callbackUrl: zod_1.z.string().optional(),
    quantity: zod_1.z.number().optional().default(1),
    batchSize: zod_1.z.number().optional().default(1),
    priority: zod_1.z.union([zod_1.z.string(), zod_1.z.number()]).optional(),
    properties: zod_1.z.record(zod_1.z.any()).optional(),
})
    .strict();
