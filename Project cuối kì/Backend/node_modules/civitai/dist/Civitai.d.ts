import { AIR } from "./models/AIR";
import { ProviderAssetAvailability } from "./models/ProviderAssetAvailability";
import { JobStatusCollection } from "./models/JobStatusCollection";
import { QueryJobsRequest } from "./models/QueryJobsRequest";
import { QueryJobsResult } from "./models/QueryJobsResult";
import { ProblemDetails } from "./models/ProblemDetails";
import { CivitaiConfig, FromComfyInput, FromTextInput } from "./types/Inputs";
import { JobStatus } from "./models/JobStatus";
declare class Civitai {
    image: {
        fromText: (input: FromTextInput, wait?: boolean) => Promise<JobStatusCollection | ProblemDetails | any>;
        fromComfy: (input: FromComfyInput, wait?: boolean) => Promise<JobStatusCollection | ProblemDetails | any>;
    };
    jobs: {
        getByToken: (token: string) => Promise<JobStatusCollection>;
        getById: (jobId: string) => Promise<JobStatus>;
        getByQuery: (query: QueryJobsRequest, detailed?: boolean) => Promise<QueryJobsResult>;
        cancel: (jobId: string) => Promise<any | ProblemDetails>;
    };
    models: {
        get: (model: Array<AIR | string>) => Promise<Record<string, ProviderAssetAvailability>>;
    };
    constructor(config: CivitaiConfig);
    pollForJobCompletion(token: string, interval?: number, // Poll every 30 seconds
    timeout?: number): Promise<any>;
}
export default Civitai;
